{
"version":3,
"file":"module$node_modules$core_js$internals$classof.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACtGC,MAAAA,CAAwBH,OAAA,CAAQ,6DAAR,CAC5B,KAAII,WAAaJ,OAAA,CAAQ,mDAAR,CAAjB,CACIK,WAAaL,OAAA,CAAQ,mDAAR,CADjB,CAIIM,cAFkBN,OAAAO,CAAQ,yDAARA,CAEF,CAAgB,aAAhB,CAJpB,CAKIC,QAAUC,MALd,CAQIC,kBAAuE,WAAvEA,EAAoBL,UAAA,CAAW,QAAS,EAAG,CAAE,MAAOM,UAAT,CAAZ,EAAX,CAUxBV;MAAOC,CAAAA,OAAP,CAAiBC,MAAA,CAAwBE,UAAxB,CAAqC,QAAS,CAACO,WAAD,CAAK,CAAA,IACtDC,MACL,IAAOC,IAAAA,EAAP,GAAAF,WAAA,CAAmB,IAAA,IAAA,WAAnB,KAAA,CAAiC,GAAA,IAAA,GAAA,WAAA,CAAA,IAAA,gBAAA,MAAA,KAAA,CATV,CAAA,CAAA,CASU,IAAA,GAAA,WAAA,CAAA,OAAA,CAAA,WAAA,CARxC,IAAI,CACF,eAAA,CAAOA,EAAA,CAO+BG,aAP/B,CAAP,OAAA,CADE,CAEF,MAAOC,KAAP,CAAc,EAHc,eAAA,CAAA,IAAA,EAAA,CASU,eAAA,CAAA,QAAA,EAAA,OAAA,GAAA,CAAA,eAAA,CAAA,CAAA,GAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,WAAA,CAAA,CAAA,QAAA,GAAA,MAAA,CAAA,UAAA,CAAA,WAAA,CAAA,GAAA,UAAA,CAAA,WAAA,CAAA,MAAA,CAAA,CAAA,WAAA,CAAA,MAAA,CAAA,GAAA,CAAA,eAAjC,CAAP,MAAO,IAF2D,CApBsC;",
"sources":["node_modules/core-js/internals/classof.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$core_js$internals$classof\"] = function(global,require,module,exports) {\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar isCallable = require('../internals/is-callable');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar $Object = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","TO_STRING_TAG_SUPPORT","isCallable","classofRaw","TO_STRING_TAG","wellKnownSymbol","$Object","Object","CORRECT_ARGUMENTS","arguments","it","result","undefined","key","error"]
}
