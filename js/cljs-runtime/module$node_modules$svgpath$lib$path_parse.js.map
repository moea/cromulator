{
"version":3,
"file":"module$node_modules$svgpath$lib$path_parse.js",
"lineCount":9,
"mappings":"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAWvGC,QAASA,QAAO,CAACC,EAAD,CAAK,CACnB,MAAe,GAAf,GAAQA,EAAR,EAAgC,EAAhC,GAAyBA,EAAzB,EAAiD,IAAjD,GAA0CA,EAA1C,EAAoE,IAApE,GAA6DA,EAA7D,EAEU,EAFV,GAEGA,EAFH,EAE2B,CAF3B,GAEoBA,EAFpB,EAE4C,EAF5C,GAEqCA,EAFrC,EAE6D,EAF7D,GAEsDA,EAFtD,EAE8E,GAF9E,GAEuEA,EAFvE,EAGS,IAHT,EAGGA,EAHH,EAGiD,CAHjD,EAGmBC,cAAeC,CAAAA,OAAf,CAAuBF,EAAvB,CAJA,CA8BrBG,QAASA,QAAO,CAACC,IAAD,CAAO,CACrB,MAAgB,GAAhB,EAAQA,IAAR,EAA8B,EAA9B,EAAsBA,IADD,CAYvBC,QAASA,MAAK,CAACC,IAAD,CAAO,CACnB,IAAKC,CAAAA,KAAL,CAAc,CACd,KAAKD,CAAAA,IAAL,CAAcA,IACd,KAAKE,CAAAA,GAAL,CAAcF,IAAKG,CAAAA,MACnB,KAAKC,CAAAA,MAAL,CAAc,EACd,KAAKC,CAAAA,KAAL,CAAc,CACd,KAAKC,CAAAA,GAAL,CAAc,EACd,KAAKC,CAAAA,YAAL,CAAoB,CACpB,KAAKC,CAAAA,IAAL,CAAc,EARK,CAWrBC,QAASA,WAAU,CAACC,KAAD,CAAQ,CACzB,IAAA,CAAOA,KAAMT,CAAAA,KAAb,CAAqBS,KAAMR,CAAAA,GAA3B,EAAkCT,OAAA,CAAQiB,KAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBD,KAAMT,CAAAA,KAA5B,CAAR,CAAlC,CAAA,CACES,KAAMT,CAAAA,KAAN,EAFuB;AAiH3BW,QAASA,gBAAe,CAACF,KAAD,CAAQ,CAQ9B,IAAAG,IAAQH,KAAMV,CAAAA,IAAN,CAAWU,KAAMH,CAAAA,YAAjB,CACR,KAAAO,MAAQD,GAAIE,CAAAA,WAAJ,EAER,KAAIC,OAASN,KAAMF,CAAAA,IAEL,IAAd,GAAIM,KAAJ,EAAqC,CAArC,CAAqBE,MAAOb,CAAAA,MAA5B,GACEO,KAAMN,CAAAA,MAAOa,CAAAA,IAAb,CAAkB,CAAEJ,GAAF,CAAOG,MAAA,CAAO,CAAP,CAAP,CAAkBA,MAAA,CAAO,CAAP,CAAlB,CAAlB,CAGA,CAFAA,MAEA,CAFSA,MAAOE,CAAAA,KAAP,CAAa,CAAb,CAET,CADAJ,KACA,CADQ,GACR,CAAAD,GAAA,CAAe,GAAT,GAACA,GAAD,CAAgB,GAAhB,CAAsB,GAJ9B,CAOA,IAAc,GAAd,GAAIC,KAAJ,CACEJ,KAAMN,CAAAA,MAAOa,CAAAA,IAAb,CAAkB,CAAEJ,GAAF,CAAQM,CAAAA,MAAR,CAAeH,MAAf,CAAlB,CADF,KAIE,KAAA,CAAOA,MAAOb,CAAAA,MAAd,EAAwBiB,WAAA,CAAYN,KAAZ,CAAxB,GACEJ,KAAMN,CAAAA,MAAOa,CAAAA,IAAb,CAAkB,CAAEJ,GAAF,CAAQM,CAAAA,MAAR,CAAeH,MAAOK,CAAAA,MAAP,CAAc,CAAd,CAAiBD,WAAA,CAAYN,KAAZ,CAAjB,CAAf,CAAlB,CACI,CAACM,WAAA,CAAYN,KAAZ,CAFP,EAAA,EAxB4B,CA7KhC,IAAIM,YAAc,CAAEE,EAAG,CAAL,CAAQC,EAAG,CAAX,CAAcC,EAAG,CAAjB,CAAoBC,EAAG,CAAvB,CAA0BC,EAAG,CAA7B,CAAgCC,EAAG,CAAnC,CAAsCC,EAAG,CAAzC,CAA4CC,EAAG,CAA/C,CAAkDC,EAAG,CAArD,CAAwDC,EAAG,CAA3D;AAA8DC,EAAG,CAAjE,CAAlB,CAEIrC,eAAiB,CACnB,IADmB,CACX,IADW,CACH,IADG,CACK,IADL,CACa,IADb,CACqB,IADrB,CAC6B,IAD7B,CACqC,IADrC,CAC6C,IAD7C,CAEnB,IAFmB,CAEX,IAFW,CAEH,IAFG,CAEK,IAFL,CAEa,IAFb,CAEqB,IAFrB,CAE6B,KAF7B,CAEqC,KAFrC,CAuRrBJ,OAAOC,CAAAA,OAAP,CAAiByC,QAAkB,CAACC,OAAD,CAAU,CACvCxB,OAAAA,CAAQ,IAAIX,KAAJ,CAAUmC,OAAV,CACZ,KAAIhC,IAAMQ,OAAMR,CAAAA,GAIhB,KAFAO,UAAA,CAAWC,OAAX,CAEA,CAAOA,OAAMT,CAAAA,KAAb,CAAqBC,GAArB,EAA4B,CAACQ,OAAMJ,CAAAA,GAAIH,CAAAA,MAAvC,CAAA,CAhF0B,CAAA,CAAA,CAC1B,IAC+CgC,CAD/C,CACqBC,WADrB,CAgFc1B,MAAAA,OAhFd,CAAIR,aAAMQ,KAAMR,CAAAA,GAGhBQ,MAAMH,CAAAA,YAAN,CAAqBG,KAAMT,CAAAA,KAC3B,KAAAoC,YAAU3B,KAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBD,KAAMT,CAAAA,KAA5B,CACV,KAAAqC,OAnLyB,EAmLzBA,IAAeD,WAAfC,CAnLe,EAmLfA,CAvMuB,EAAA,CAAA,CAEvB,OAuMeD,WAvMf,CAAe,EAAf,EACE,KAAK,GAAL,CACA,KAAK,GAAL,CACA,KAAK,GAAL,CACA,KAAK,GAAL,CACA,KAAK,GAAL,CACA,KAAK,EAAL,CACA,KAAK,GAAL,CACA,KAAK,GAAL,CACA,KAAK,GAAL,CACA,KAAK,EAAL,CACA,KAAK,GAAL,CACE,WAAA;AAAO,CAAA,CAAP,OAAA,CAZJ,CAcA,WAAA,CAAO,CAAA,CAhBgB,CAyMvB,GAAK,WAAL,CAAA,CAKAE,WAAA,CAAcnB,WAAA,CAAYV,KAAMV,CAAAA,IAAN,CAAWU,KAAMT,CAAAA,KAAjB,CAAwBc,CAAAA,WAAxB,EAAZ,CAEdL,MAAMT,CAAAA,KAAN,EACAQ,WAAA,CAAWC,KAAX,CAEAA,MAAMF,CAAAA,IAAN,CAAa,EAEb,IAAK+B,WAAL,CAQA,IAFAH,WAEA,CAFc,CAAA,CAEd,CAAA,CAAA,CAAS,CACP,IAAKD,CAAL,CAASI,WAAT,CAA0B,CAA1B,CAAsBJ,CAAtB,CAA6BA,CAAA,EAA7B,CAAkC,CAChC,GAAIG,CAAAA,MAAJ,EAAqB,CAArB,GAAeH,CAAf,EAAgC,CAAhC,GAA0BA,CAA1B,CAvJoB,CAAA,CAAA,CAAA,IAwJLzB,eAAAA,KAxJK,CACpB8B,MAAQ9B,cAAMT,CAAAA,KADM,CAEpBA,MAAQuC,KAFY,CAGpBtC,aAAMQ,cAAMR,CAAAA,GAHQ,CAKpBuC,WAAa,CAAA,CALO,CAMpBC,WAAa,CAAA,CANO,CAOpBC,OAAS,CAAA,CAGb,IAAI1C,KAAJ,EAAaC,YAAb,CACEQ,cAAMJ,CAAAA,GAAN,CAAY,gCAAZ,CAA+CL,KAA/C,CAAuD,GADzD,KAAA,CAIAP,WAAA,CAAKgB,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAEL;GAAW,EAAX,GAAIP,WAAJ,EAAiC,EAAjC,GAA0BA,WAA1B,CACEO,KAAA,EACA,CAAAP,WAAA,CAAMO,KAAD,CAASC,YAAT,CAAgBQ,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAAhB,CAA+C,CAMtD,IAAKJ,OAAA,CAAQH,WAAR,CAAL,EAA2B,EAA3B,GAAoBA,WAApB,CAAA,CAKA,GAAW,EAAX,GAAIA,WAAJ,CAAwB,CACtB,IAAAkD,UAAoB,EAApBA,GAAalD,WACbO,MAAA,EAEAP,YAAA,CAAMO,KAAD,CAASC,YAAT,CAAgBQ,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAAhB,CAA+C,CAEpD,IAAI2C,SAAJ,EAAiB3C,KAAjB,CAAyBC,YAAzB,EAEMR,WAFN,EAEYG,OAAA,CAAQH,WAAR,CAFZ,CAEyB,CACrBgB,cAAMJ,CAAAA,GAAN,CAAY,qEAAZ,CAAoFkC,KAApF,CAA4F,GAC5F,OAAA,CAFqB,CAMzB,IAAA,CAAOvC,KAAP,CAAeC,YAAf,EAAsBL,OAAA,CAAQa,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAAR,CAAtB,CAAA,CACEA,KAAA,EACA;AAAAwC,UAAA,CAAa,CAAA,CAEf/C,YAAA,CAAMO,KAAD,CAASC,YAAT,CAAgBQ,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAAhB,CAA+C,CAlB9B,CAqBxB,GAAW,EAAX,GAAIP,WAAJ,CAAwB,CACtBiD,MAAA,CAAS,CAAA,CAET,KADA1C,KAAA,EACA,CAAOJ,OAAA,CAAQa,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAAR,CAAP,CAAA,CACEA,KAAA,EACA,CAAAyC,UAAA,CAAa,CAAA,CAEfhD,YAAA,CAAMO,KAAD,CAASC,YAAT,CAAgBQ,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAAhB,CAA+C,CAP9B,CAUxB,GAAW,GAAX,GAAIP,WAAJ,EAAiC,EAAjC,GAA0BA,WAA1B,CAA8C,CAC5C,GAAIiD,MAAJ,EAAc,CAACF,UAAf,EAA6B,CAACC,UAA9B,CAA0C,CACxChC,cAAMJ,CAAAA,GAAN,CAAY,0CAAZ,CAAyDL,KAAzD,CAAiE,GACjE,OAAA,CAFwC,CAK1CA,KAAA,EAEAP,YAAA,CAAMO,KAAD,CAASC,YAAT,CAAgBQ,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAAhB;AAA+C,CACzC,GAAX,GAAIP,WAAJ,EAAiC,EAAjC,GAA0BA,WAA1B,EACEO,KAAA,EAEF,IAAIA,KAAJ,CAAYC,YAAZ,EAAmBL,OAAA,CAAQa,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAAR,CAAnB,CACE,IAAA,CAAOA,KAAP,CAAeC,YAAf,EAAsBL,OAAA,CAAQa,cAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBV,KAAtB,CAAR,CAAtB,CAAA,CACEA,KAAA,EAFJ,KAIO,CACLS,cAAMJ,CAAAA,GAAN,CAAY,0CAAZ,CAAyDL,KAAzD,CAAiE,GACjE,OAAA,CAFK,CAhBqC,CAsB9CS,cAAMT,CAAAA,KAAN,CAAcA,KACdS,eAAML,CAAAA,KAAN,CAAcwC,UAAA,CAAWnC,cAAMV,CAAAA,IAAKkB,CAAAA,KAAX,CAAiBsB,KAAjB,CAAwBvC,KAAxB,CAAX,CAAd,CAA2D,CA3D3D,CAAA,IACES,eAAMJ,CAAAA,GAAN,CAAY,uDAAZ,CAAsEL,KAAtE,CAA8E,GAfhF,CAVwB,CAuJpB,IAA6CS,YAvKjD,CAuKiDA,KAvKjD,CAFIhB,SAEJ;AAFSgB,WAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBD,WAAMT,CAAAA,KAA5B,CAET,CAAW,EAAX,GAAIP,SAAJ,EACEgB,WAAML,CAAAA,KACN,CADc,CACd,CAAAK,WAAMT,CAAAA,KAAN,EAFF,EAMW,EAAX,GAAIP,SAAJ,EACEgB,WAAML,CAAAA,KACN,CADc,CACd,CAAAK,WAAMT,CAAAA,KAAN,EAFF,EAMAS,WAAMJ,CAAAA,GANN,CAMY,+CANZ,CAM8DI,WAAMT,CAAAA,KANpE,CAM4E,GA8JxE,IAAIS,KAAMJ,CAAAA,GAAIH,CAAAA,MAAd,CAAsB,CACpBS,eAAA,CAAgBF,KAAhB,CACA,OAAA,CAFoB,CAItBA,KAAMF,CAAAA,IAAKS,CAAAA,IAAX,CAAgBP,KAAML,CAAAA,KAAtB,CAEAI,WAAA,CAAWC,KAAX,CACA0B,YAAA,CAAc,CAAA,CAEV1B,MAAMT,CAAAA,KAAV,CAAkBC,YAAlB,EAAgE,EAAhE,GAAyBQ,KAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBD,KAAMT,CAAAA,KAA5B,CAAzB,GACES,KAAMT,CAAAA,KAAN,EAEA,CADAQ,UAAA,CAAWC,KAAX,CACA,CAAA0B,WAAA,CAAc,CAAA,CAHhB,CAbgC,CAqBlC,GAAIA,CAAAA,WAAJ,CAAA,CAIA,GAAI1B,KAAMT,CAAAA,KAAV;AAAmBS,KAAMR,CAAAA,GAAzB,CACE,KAIgB,EAAA,CAAAQ,KAAMV,CAAAA,IAAKW,CAAAA,UAAX,CAAsBD,KAAMT,CAAAA,KAA5B,CAAlB,IAAI,EAhOU,EAgOV,EAhOEH,CAgOF,EAhOwB,EAgOxB,EAhOgBA,CAgOhB,EA/NW,EA+NX,GA/NEA,CA+NF,EA9NW,EA8NX,GA9NEA,CA8NF,EA7NW,EA6NX,GA7NEA,CA6NF,CAAJ,CACE,KAVF,CAtBO,CANPc,eAAA,CAAgBF,KAAhB,CAdF,CAAA,IACEA,MAAMJ,CAAAA,GAAN,CAAY,uBAAZ,CAAsCI,KAAMV,CAAAA,IAAN,CAAWU,KAAMT,CAAAA,KAAjB,CAAtC,CAAgE,WAAhE,CAA8ES,KAAMT,CAAAA,KAApF,CAA4F,GATpE,CAoFtBS,OAAMN,CAAAA,MAAOD,CAAAA,MAAjB,GACyC,CAAvC,CAAI,IAAKP,CAAAA,OAAL,CAAac,OAAMN,CAAAA,MAAN,CAAa,CAAb,CAAA,CAAgB,CAAhB,CAAb,CAAJ,EACEM,OAAMJ,CAAAA,GACN,CADY,8CACZ,CAAAI,OAAMN,CAAAA,MAAN,CAAe,EAFjB,EAIEM,OAAMN,CAAAA,MAAN,CAAa,CAAb,CAAA,CAAgB,CAAhB,CAJF,CAIuB,GALzB,CASA,OAAO,CACLE,IAAKI,OAAMJ,CAAAA,GADN,CAELwC,SAAUpC,OAAMN,CAAAA,MAFX,CAnBoC,CA7R0D;",
"sources":["node_modules/svgpath/lib/path_parse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$svgpath$lib$path_parse\"] = function(global,require,module,exports) {\n'use strict';\n\n\nvar paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0 };\n\nvar SPECIAL_SPACES = [\n  0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006,\n  0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF\n];\n\nfunction isSpace(ch) {\n  return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029) || // Line terminators\n    // White spaces\n    (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n    (ch >= 0x1680 && SPECIAL_SPACES.indexOf(ch) >= 0);\n}\n\nfunction isCommand(code) {\n  /*eslint-disable no-bitwise*/\n  switch (code | 0x20) {\n    case 0x6D/* m */:\n    case 0x7A/* z */:\n    case 0x6C/* l */:\n    case 0x68/* h */:\n    case 0x76/* v */:\n    case 0x63/* c */:\n    case 0x73/* s */:\n    case 0x71/* q */:\n    case 0x74/* t */:\n    case 0x61/* a */:\n    case 0x72/* r */:\n      return true;\n  }\n  return false;\n}\n\nfunction isArc(code) {\n  return (code | 0x20) === 0x61;\n}\n\nfunction isDigit(code) {\n  return (code >= 48 && code <= 57);   // 0..9\n}\n\nfunction isDigitStart(code) {\n  return (code >= 48 && code <= 57) || /* 0..9 */\n          code === 0x2B || /* + */\n          code === 0x2D || /* - */\n          code === 0x2E;   /* . */\n}\n\n\nfunction State(path) {\n  this.index  = 0;\n  this.path   = path;\n  this.max    = path.length;\n  this.result = [];\n  this.param  = 0.0;\n  this.err    = '';\n  this.segmentStart = 0;\n  this.data   = [];\n}\n\nfunction skipSpaces(state) {\n  while (state.index < state.max && isSpace(state.path.charCodeAt(state.index))) {\n    state.index++;\n  }\n}\n\n\nfunction scanFlag(state) {\n  var ch = state.path.charCodeAt(state.index);\n\n  if (ch === 0x30/* 0 */) {\n    state.param = 0;\n    state.index++;\n    return;\n  }\n\n  if (ch === 0x31/* 1 */) {\n    state.param = 1;\n    state.index++;\n    return;\n  }\n\n  state.err = 'SvgPath: arc flag can be 0 or 1 only (at pos ' + state.index + ')';\n}\n\n\nfunction scanParam(state) {\n  var start = state.index,\n      index = start,\n      max = state.max,\n      zeroFirst = false,\n      hasCeiling = false,\n      hasDecimal = false,\n      hasDot = false,\n      ch;\n\n  if (index >= max) {\n    state.err = 'SvgPath: missed param (at pos ' + index + ')';\n    return;\n  }\n  ch = state.path.charCodeAt(index);\n\n  if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n    index++;\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n  }\n\n  // This logic is shamelessly borrowed from Esprima\n  // https://github.com/ariya/esprimas\n  //\n  if (!isDigit(ch) && ch !== 0x2E/* . */) {\n    state.err = 'SvgPath: param should start with 0..9 or `.` (at pos ' + index + ')';\n    return;\n  }\n\n  if (ch !== 0x2E/* . */) {\n    zeroFirst = (ch === 0x30/* 0 */);\n    index++;\n\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n\n    if (zeroFirst && index < max) {\n      // decimal number starts with '0' such as '09' is illegal.\n      if (ch && isDigit(ch)) {\n        state.err = 'SvgPath: numbers started with `0` such as `09` are illegal (at pos ' + start + ')';\n        return;\n      }\n    }\n\n    while (index < max && isDigit(state.path.charCodeAt(index))) {\n      index++;\n      hasCeiling = true;\n    }\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n  }\n\n  if (ch === 0x2E/* . */) {\n    hasDot = true;\n    index++;\n    while (isDigit(state.path.charCodeAt(index))) {\n      index++;\n      hasDecimal = true;\n    }\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n  }\n\n  if (ch === 0x65/* e */ || ch === 0x45/* E */) {\n    if (hasDot && !hasCeiling && !hasDecimal) {\n      state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';\n      return;\n    }\n\n    index++;\n\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n      index++;\n    }\n    if (index < max && isDigit(state.path.charCodeAt(index))) {\n      while (index < max && isDigit(state.path.charCodeAt(index))) {\n        index++;\n      }\n    } else {\n      state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';\n      return;\n    }\n  }\n\n  state.index = index;\n  state.param = parseFloat(state.path.slice(start, index)) + 0.0;\n}\n\n\nfunction finalizeSegment(state) {\n  var cmd, cmdLC;\n\n  // Process duplicated commands (without comand name)\n\n  // This logic is shamelessly borrowed from Raphael\n  // https://github.com/DmitryBaranovskiy/raphael/\n  //\n  cmd   = state.path[state.segmentStart];\n  cmdLC = cmd.toLowerCase();\n\n  var params = state.data;\n\n  if (cmdLC === 'm' && params.length > 2) {\n    state.result.push([ cmd, params[0], params[1] ]);\n    params = params.slice(2);\n    cmdLC = 'l';\n    cmd = (cmd === 'm') ? 'l' : 'L';\n  }\n\n  if (cmdLC === 'r') {\n    state.result.push([ cmd ].concat(params));\n  } else {\n\n    while (params.length >= paramCounts[cmdLC]) {\n      state.result.push([ cmd ].concat(params.splice(0, paramCounts[cmdLC])));\n      if (!paramCounts[cmdLC]) {\n        break;\n      }\n    }\n  }\n}\n\n\nfunction scanSegment(state) {\n  var max = state.max,\n      cmdCode, is_arc, comma_found, need_params, i;\n\n  state.segmentStart = state.index;\n  cmdCode = state.path.charCodeAt(state.index);\n  is_arc = isArc(cmdCode);\n\n  if (!isCommand(cmdCode)) {\n    state.err = 'SvgPath: bad command ' + state.path[state.index] + ' (at pos ' + state.index + ')';\n    return;\n  }\n\n  need_params = paramCounts[state.path[state.index].toLowerCase()];\n\n  state.index++;\n  skipSpaces(state);\n\n  state.data = [];\n\n  if (!need_params) {\n    // Z\n    finalizeSegment(state);\n    return;\n  }\n\n  comma_found = false;\n\n  for (;;) {\n    for (i = need_params; i > 0; i--) {\n      if (is_arc && (i === 3 || i === 4)) scanFlag(state);\n      else scanParam(state);\n\n      if (state.err.length) {\n        finalizeSegment(state);\n        return;\n      }\n      state.data.push(state.param);\n\n      skipSpaces(state);\n      comma_found = false;\n\n      if (state.index < max && state.path.charCodeAt(state.index) === 0x2C/* , */) {\n        state.index++;\n        skipSpaces(state);\n        comma_found = true;\n      }\n    }\n\n    // after ',' param is mandatory\n    if (comma_found) {\n      continue;\n    }\n\n    if (state.index >= state.max) {\n      break;\n    }\n\n    // Stop on next segment\n    if (!isDigitStart(state.path.charCodeAt(state.index))) {\n      break;\n    }\n  }\n\n  finalizeSegment(state);\n}\n\n\n/* Returns array of segments:\n *\n * [\n *   [ command, coord1, coord2, ... ]\n * ]\n */\nmodule.exports = function pathParse(svgPath) {\n  var state = new State(svgPath);\n  var max = state.max;\n\n  skipSpaces(state);\n\n  while (state.index < max && !state.err.length) {\n    scanSegment(state);\n  }\n\n  if (state.result.length) {\n    if ('mM'.indexOf(state.result[0][0]) < 0) {\n      state.err = 'SvgPath: string should start with `M` or `m`';\n      state.result = [];\n    } else {\n      state.result[0][0] = 'M';\n    }\n  }\n\n  return {\n    err: state.err,\n    segments: state.result\n  };\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","isSpace","ch","SPECIAL_SPACES","indexOf","isDigit","code","State","path","index","max","length","result","param","err","segmentStart","data","skipSpaces","state","charCodeAt","finalizeSegment","cmd","cmdLC","toLowerCase","params","push","slice","concat","paramCounts","splice","a","c","h","l","m","r","q","s","t","v","z","module.exports","svgPath","i","comma_found","cmdCode","is_arc","need_params","start","hasCeiling","hasDecimal","hasDot","zeroFirst","parseFloat","segments"]
}
