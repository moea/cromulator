{"version":3,"sources":["cromulator/util.cljc"],"mappings":"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","names":["cromulator.util/sin","Math/sin","cromulator.util/cos","Math/cos","cromulator.util/pow","Math/pow","cromulator.util/sign","Math/sign","cromulator.util/tan","Math/tan","cromulator.util/acos","Math/acos","cromulator.util/ceil","Math/ceil","cromulator.util/hypot","Math/hypot","cromulator.util/sqrt","Math/sqrt","var_args","G__17739","cromulator.util/atan","js/Error","n","Math/atan","m","Math/atan2","cromulator.util/sq","cromulator.util/dub","cromulator.util/half","cromulator.util/PI","Math/PI","cromulator.util/TAU","cromulator.util/E","Math/E","cromulator.util/rad","x","cromulator.util/deg","G__17741","cromulator.util/pointwise","p__17742","p__17743","vec__17744","cljs.core.nth","vec__17747","f","a","b","c","d","cromulator.util.pointwise","G__17751","cromulator.util/both","y","cromulator.util/make-partial","args","cljs.core._EQ_","cljs.core/count","cljs.core.apply","cljs.core/partial","cromulator.util/*","cljs.core/*","G__17753","cromulator.util/polar->cart","p__17754","map__17755","cljs.core/--destructure-map","cljs.core.get","cx","cy","r","t","r'","cromulator.util.polar__GT_cart","G__17757","cromulator.util/cart->polar","p__17758","vec__17759","p__17762","p__17763","map__17764","vec__17765","cljs.core/mod","cromulator.util.atan","cromulator.util.cart__GT_polar"],"sourcesContent":["(ns cromulator.util\n  (:refer-clojure :exclude [*]))\n\n(def sin   Math/sin)\n(def cos   Math/cos)\n(def pow   Math/pow)\n(def sign  Math/sign)\n(def tan   Math/tan)\n(def acos  Math/acos)\n(def ceil  Math/ceil)\n(def hypot Math/hypot)\n\n(def sqrt Math/sqrt)\n\n(defn atan\n  ([n]   (Math/atan n))\n  ([n m] (Math/atan2 n m)))\n\n(defn sq [n]\n  (clojure.core/* n n))\n\n(defn dub [n]\n  (clojure.core/* n 2))\n\n(defn half [n]\n  (clojure.core/* n 0.5))\n\n(def PI  Math/PI)\n(def TAU (dub PI))\n(def E   Math/E)\n\n(defn rad [x]\n  (clojure.core/* x (/ PI 180)))\n\n(defn deg [x]\n  (clojure.core/* x (/ 180 PI)))\n\n(defn pointwise\n  ([f  a b   c d]  [(f a c) (f b d)])\n  ([f [a b] [c d]] (pointwise f a b c d)))\n\n(defn both\n  ([f  x y]    [(f x) (f y)])\n  ([f a x y]   [(f a x) (f a y)]))\n\n(defn- make-partial [f]\n  (fn part [& args]\n    (if (= 1 (count args))\n      (apply partial f args)\n      (apply f args))))\n\n(def * (make-partial clojure.core/*))\n\n(defn polar->cart\n  ([cx cy r t]\n   (let [r' (rad (- t 90))]\n     [(+ cx (clojure.core/* r (cos r')))\n      (+ cy (clojure.core/* r (sin r')))]))\n  ([{cx :cx cy :cy r :r} t]\n   (polar->cart cx cy r t)))\n\n(defn cart->polar\n  ([cx cy [x y]]\n   (mod (+ (deg (atan (- y cy) (- x cx))) 450) 360))\n  ([{cx :cx cy :cy} [x y]]\n   (cart->polar cx cy [x y])))\n"]}