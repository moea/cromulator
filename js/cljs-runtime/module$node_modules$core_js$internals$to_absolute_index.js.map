{
"version":3,
"file":"module$node_modules$core_js$internals$to_absolute_index.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACpH,IAAIC,oBAAsBH,OAAA,CAAQ,8DAAR,CAA1B,CAEII,IAAMC,IAAKD,CAAAA,GAFf,CAGIE,IAAMD,IAAKC,CAAAA,GAKfL,OAAOC,CAAAA,OAAP,CAAiBK,QAAS,CAACC,KAAD,CAAQC,MAAR,CAAgB,CACpCC,KAAAA,CAAUP,mBAAA,CAAoBK,KAApB,CACd,OAAiB,EAAV,CAAAE,KAAA,CAAcN,GAAA,CAAIM,KAAJ,CAAcD,MAAd,CAAsB,CAAtB,CAAd,CAAyCH,GAAA,CAAII,KAAJ,CAAaD,MAAb,CAFR,CAT0E;",
"sources":["node_modules/core-js/internals/to-absolute-index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$core_js$internals$to_absolute_index\"] = function(global,require,module,exports) {\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","toIntegerOrInfinity","max","Math","min","module.exports","index","length","integer"]
}
