{
"version":3,
"file":"module$node_modules$svgpath$lib$a2c.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/svgpath/lib/a2c.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$svgpath$lib$a2c\"] = function(global,require,module,exports) {\n// Convert an arc to a sequence of cubic b\u00e9zier curves\n//\n'use strict';\n\n\nvar TAU = Math.PI * 2;\n\n\n/* eslint-disable space-infix-ops */\n\n// Calculate an angle between two unit vectors\n//\n// Since we measure angle between radii of circular arcs,\n// we can use simplified math (without length normalization)\n//\nfunction unit_vector_angle(ux, uy, vx, vy) {\n  var sign = (ux * vy - uy * vx < 0) ? -1 : 1;\n  var dot  = ux * vx + uy * vy;\n\n  // Add this to work with arbitrary vectors:\n  // dot /= Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n\n  // rounding errors, e.g. -1.0000000000000002 can screw up this\n  if (dot >  1.0) { dot =  1.0; }\n  if (dot < -1.0) { dot = -1.0; }\n\n  return sign * Math.acos(dot);\n}\n\n\n// Convert from endpoint to center parameterization,\n// see http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n//\n// Return [cx, cy, theta1, delta_theta]\n//\nfunction get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {\n  // Step 1.\n  //\n  // Moving an ellipse so origin will be the middlepoint between our two\n  // points. After that, rotate it to line up ellipse axes with coordinate\n  // axes.\n  //\n  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n  var rx_sq  =  rx * rx;\n  var ry_sq  =  ry * ry;\n  var x1p_sq = x1p * x1p;\n  var y1p_sq = y1p * y1p;\n\n  // Step 2.\n  //\n  // Compute coordinates of the centre of this ellipse (cx', cy')\n  // in the new coordinate system.\n  //\n  var radicant = (rx_sq * ry_sq) - (rx_sq * y1p_sq) - (ry_sq * x1p_sq);\n\n  if (radicant < 0) {\n    // due to rounding errors it might be e.g. -1.3877787807814457e-17\n    radicant = 0;\n  }\n\n  radicant /=   (rx_sq * y1p_sq) + (ry_sq * x1p_sq);\n  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);\n\n  var cxp = radicant *  rx/ry * y1p;\n  var cyp = radicant * -ry/rx * x1p;\n\n  // Step 3.\n  //\n  // Transform back to get centre coordinates (cx, cy) in the original\n  // coordinate system.\n  //\n  var cx = cos_phi*cxp - sin_phi*cyp + (x1+x2)/2;\n  var cy = sin_phi*cxp + cos_phi*cyp + (y1+y2)/2;\n\n  // Step 4.\n  //\n  // Compute angles (theta1, delta_theta).\n  //\n  var v1x =  (x1p - cxp) / rx;\n  var v1y =  (y1p - cyp) / ry;\n  var v2x = (-x1p - cxp) / rx;\n  var v2y = (-y1p - cyp) / ry;\n\n  var theta1 = unit_vector_angle(1, 0, v1x, v1y);\n  var delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);\n\n  if (fs === 0 && delta_theta > 0) {\n    delta_theta -= TAU;\n  }\n  if (fs === 1 && delta_theta < 0) {\n    delta_theta += TAU;\n  }\n\n  return [ cx, cy, theta1, delta_theta ];\n}\n\n//\n// Approximate one unit arc segment with b\u00e9zier curves,\n// see http://math.stackexchange.com/questions/873224\n//\nfunction approximate_unit_arc(theta1, delta_theta) {\n  var alpha = 4/3 * Math.tan(delta_theta/4);\n\n  var x1 = Math.cos(theta1);\n  var y1 = Math.sin(theta1);\n  var x2 = Math.cos(theta1 + delta_theta);\n  var y2 = Math.sin(theta1 + delta_theta);\n\n  return [ x1, y1, x1 - y1*alpha, y1 + x1*alpha, x2 + y2*alpha, y2 - x2*alpha, x2, y2 ];\n}\n\nmodule.exports = function a2c(x1, y1, x2, y2, fa, fs, rx, ry, phi) {\n  var sin_phi = Math.sin(phi * TAU / 360);\n  var cos_phi = Math.cos(phi * TAU / 360);\n\n  // Make sure radii are valid\n  //\n  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n  if (x1p === 0 && y1p === 0) {\n    // we're asked to draw line to itself\n    return [];\n  }\n\n  if (rx === 0 || ry === 0) {\n    // one of the radii is zero\n    return [];\n  }\n\n\n  // Compensate out-of-range radii\n  //\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n\n  var lambda = (x1p * x1p) / (rx * rx) + (y1p * y1p) / (ry * ry);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n\n\n  // Get center parameters (cx, cy, theta1, delta_theta)\n  //\n  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);\n\n  var result = [];\n  var theta1 = cc[2];\n  var delta_theta = cc[3];\n\n  // Split an arc to multiple segments, so each segment\n  // will be less than \u03c4/4 (= 90\u00b0)\n  //\n  var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU / 4)), 1);\n  delta_theta /= segments;\n\n  for (var i = 0; i < segments; i++) {\n    result.push(approximate_unit_arc(theta1, delta_theta));\n    theta1 += delta_theta;\n  }\n\n  // We have a bezier approximation of a unit circle,\n  // now need to transform back to the original ellipse\n  //\n  return result.map(function (curve) {\n    for (var i = 0; i < curve.length; i += 2) {\n      var x = curve[i + 0];\n      var y = curve[i + 1];\n\n      // scale\n      x *= rx;\n      y *= ry;\n\n      // rotate\n      var xp = cos_phi*x - sin_phi*y;\n      var yp = sin_phi*x + cos_phi*y;\n\n      // translate\n      curve[i + 0] = xp + cc[0];\n      curve[i + 1] = yp + cc[1];\n    }\n\n    return curve;\n  });\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","unit_vector_angle","ux","uy","vx","vy","dot","sign","Math","acos","get_arc_center","x1","y1","x2","y2","fa","fs","rx","ry","sin_phi","cos_phi","x1p","y1p","rx_sq","ry_sq","x1p_sq","y1p_sq","radicant","sqrt","cxp","cyp","cx","cy","v1x","v1y","v2x","v2y","theta1","delta_theta","TAU","approximate_unit_arc","alpha","tan","cos","sin","PI","module.exports","phi","abs","lambda","cc","result","segments","max","ceil","i","push","map","curve","length","x","y","yp"]
}
