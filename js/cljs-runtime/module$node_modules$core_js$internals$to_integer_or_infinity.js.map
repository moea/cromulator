{
"version":3,
"file":"module$node_modules$core_js$internals$to_integer_or_infinity.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACzH,IAAIC,MAAQH,OAAA,CAAQ,kDAAR,CAIZC,OAAOC,CAAAA,OAAP,CAAiBE,QAAS,CAACC,QAAD,CAAW,CAC/BC,QAAAA,CAAS,CAACD,QAEd,OAAOC,SAAA,GAAWA,QAAX,EAAgC,CAAhC,GAAqBA,QAArB,CAAoC,CAApC,CAAwCH,KAAA,CAAMG,QAAN,CAHZ,CALoF;",
"sources":["node_modules/core-js/internals/to-integer-or-infinity.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$core_js$internals$to_integer_or_infinity\"] = function(global,require,module,exports) {\nvar trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","trunc","module.exports","argument","number"]
}
